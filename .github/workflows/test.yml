name: Test Suite

on:
  push:
    branches: [ main, develop, ak_game_design ]
  pull_request:
    branches: [ main, develop ]

env:
  TOKENIZERS_PARALLELISM: false
  SDL_VIDEODRIVER: dummy

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: counter_strike_db_test
          POSTGRES_USER: cs_user
          POSTGRES_PASSWORD: cs_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      chromadb:
        image: ghcr.io/chroma-core/chroma:latest
        env:
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_HTTP_PORT: 8000
        ports:
          - 8000:8000

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-mixer-dev libsdl2-image-dev libsdl2-ttf-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-benchmark
    
    - name: Wait for services to be ready
      run: |
        sleep 10
        curl -f http://localhost:8000/api/v1/heartbeat || exit 1
    
    - name: Set up test environment
      run: |
        mkdir -p logs .chroma
        cp env.example .env.test
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: test-key-anthropic
        OPENAI_API_KEY: test-key-openai
    
    - name: Run core functionality tests
      run: |
        python -m pytest tests/test_core.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
    
    - name: Run RAG tests
      run: |
        python -m pytest tests/test_rag.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
    
    - name: Run agent tests (essential)
      run: |
        python -m pytest tests/test_agents_essential.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
    
    - name: Run integration tests (essential)
      run: |
        python -m pytest tests/test_integration_essential.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
    
    - name: Run Docker integration tests
      run: |
        python -m pytest tests/test_docker_integration.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
    
    - name: Generate test report
      run: |
        python -m pytest --junitxml=test-output.xml --cov=counter_strike_ag2_agent --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-output.xml
          coverage.xml
          .coverage

  test-runner:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run streamlined test runner
      run: |
        python tests/run_tests.py --category all --coverage --verbose
      env:
        DATABASE_URL: sqlite:///test.db
        CHROMA_URL: http://localhost:8000
