name: Test Suite

on:
  push:
    branches: [ main, develop, ak_game_design ]
  pull_request:
    branches: [ main, develop ]

env:
  TOKENIZERS_PARALLELISM: false
  SDL_VIDEODRIVER: dummy

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: counter_strike_db_test
          POSTGRES_USER: cs_user
          POSTGRES_PASSWORD: cs_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      chromadb:
        image: ghcr.io/chroma-core/chroma:0.5.0
        env:
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_HTTP_PORT: 8000
          IS_PERSISTENT: TRUE
          ANONYMIZED_TELEMETRY: FALSE
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-mixer-dev libsdl2-image-dev libsdl2-ttf-dev curl postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install test dependencies first (lighter)
        pip install pytest pytest-cov pytest-xdist pytest-benchmark pytest-asyncio
        # Install main requirements
        pip install -r requirements.txt --prefer-binary
    
    - name: Wait for services to be ready
      run: |
        echo "Services should be healthy via Docker health checks"
        # Quick verification that services are responding
        curl -f http://localhost:8000/api/v1/heartbeat
        echo "ChromaDB is ready!"
    
    - name: Set up test environment
      run: |
        mkdir -p logs .chroma
        cp env.example .env.test
        # Set API keys in .env.test if available
        if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
          sed -i 's/your-anthropic-api-key-here/${{ secrets.ANTHROPIC_API_KEY }}/g' .env.test
        fi
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          sed -i 's/your-openai-api-key-here/${{ secrets.OPENAI_API_KEY }}/g' .env.test
        fi
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run core functionality tests
      run: |
        python -m pytest tests/test_core.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run RAG tests
      run: |
        python -m pytest tests/test_rag.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run agent tests (essential)
      run: |
        python -m pytest tests/test_agents_essential.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run integration tests (essential)
      run: |
        python -m pytest tests/test_integration_essential.py -v --cov=counter_strike_ag2_agent --cov-append
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run Docker integration tests
      run: |
        # Create .env file for Docker services
        cp env.example .env
        if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
          sed -i 's/your-anthropic-api-key-here/${{ secrets.ANTHROPIC_API_KEY }}/g' .env
        fi
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          sed -i 's/your-openai-api-key-here/${{ secrets.OPENAI_API_KEY }}/g' .env
        fi
        
        # Create logs directory
        mkdir -p logs
        
        # Initialize database schema for Docker integration tests
        echo "Initializing database schema..."
        PGPASSWORD=cs_password psql -h localhost -U cs_user -d counter_strike_db_test -f docker/postgres/init.sql
        
        # Build the Docker images first
        echo "Building Docker images..."
        docker compose build api agent_service
        
        # Start API service manually (connecting to GitHub Actions services)
        echo "Starting API service..."
        docker run -d --name cs_api_test \
          --network host \
          -e DATABASE_URL=postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test \
          -e CHROMA_URL=http://localhost:8000 \
          -e ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY} \
          -e OPENAI_API_KEY=${OPENAI_API_KEY} \
          -v $(pwd)/logs:/app/logs \
          counter_strike_ag2_agent-api:latest
          
        # Start Agent service manually (connecting to GitHub Actions services)
        echo "Starting Agent service..."
        docker run -d --name cs_agents_test \
          --network host \
          -e DATABASE_URL=postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test \
          -e CHROMA_URL=http://localhost:8000 \
          -e ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY} \
          -e OPENAI_API_KEY=${OPENAI_API_KEY} \
          -v $(pwd)/logs:/app/logs \
          counter_strike_ag2_agent-agent_service:latest
        
        # Wait for services to be ready
        echo "Waiting for API service..."
        for i in {1..30}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "API service is ready"
            break
          fi
          echo "Waiting for API... (attempt $i/30)"
          sleep 2
        done
        
        echo "Waiting for Agent service..."
        for i in {1..30}; do
          if curl -f http://localhost:8081/health >/dev/null 2>&1; then
            echo "Agent service is ready"
            break
          fi
          echo "Waiting for Agent service... (attempt $i/30)"
          sleep 2
        done
        
        # Run the Docker integration tests
        python -m pytest tests/test_docker_integration.py -v --cov=counter_strike_ag2_agent --cov-append
        
        # If tests failed, show container logs for debugging
        if [ $? -ne 0 ]; then
          echo "=== API Service Logs ==="
          docker logs cs_api_test || true
          echo "=== Agent Service Logs ==="
          docker logs cs_agents_test || true
        fi
        
        # Clean up services
        echo "Cleaning up test containers..."
        docker stop cs_api_test cs_agents_test || true
        docker rm cs_api_test cs_agents_test || true
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Generate test report
      run: |
        python -m pytest --junitxml=test-output.xml --cov=counter_strike_ag2_agent --asyncio-mode=auto
      env:
        DATABASE_URL: postgresql://cs_user:cs_password@localhost:5432/counter_strike_db_test
        CHROMA_URL: http://localhost:8000
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-3.11
        path: |
          test-output.xml
          coverage.xml
          .coverage
