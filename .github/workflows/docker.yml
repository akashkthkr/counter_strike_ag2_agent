name: Docker Build & Test

on:
  push:
    branches: [ main, develop, ak_game_design ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create .env file for testing
      run: |
        cp env.example .env
        # Use real API keys if available for more realistic testing
        if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
          sed -i 's/your-anthropic-api-key-here/${{ secrets.ANTHROPIC_API_KEY }}/g' .env
        else
          sed -i 's/your-anthropic-api-key-here/test-key-anthropic/g' .env
        fi
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          sed -i 's/your-openai-api-key-here/${{ secrets.OPENAI_API_KEY }}/g' .env
        else
          sed -i 's/your-openai-api-key-here/test-key-openai/g' .env
        fi
    
    - name: Build Docker images
      run: |
        docker compose build --parallel
    
    - name: Start services
      run: |
        docker compose up -d postgres chromadb
        sleep 45
    
    - name: Test database connectivity
      run: |
        docker compose exec -T postgres pg_isready -U cs_user -d counter_strike_db
    
    - name: Test ChromaDB connectivity
      run: |
        echo "Testing ChromaDB connectivity..."
        # ChromaDB should be healthy due to health check, but verify
        curl -f http://localhost:8000/api/v1/heartbeat
        echo "ChromaDB is ready and healthy!"
    
    - name: Start API and Agent services
      run: |
        docker compose up -d api agent_service
        sleep 20
    
    - name: Test API health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done'
    
    - name: Test Agent service health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8081/health; do sleep 5; done'
    
    - name: Run tests in Docker
      run: |
        docker compose exec -T api python -m pytest tests/test_core.py tests/test_rag.py -v
    
    - name: Test Docker compose full stack
      run: |
        docker compose up -d web_ui
        sleep 10
        curl -f http://localhost:8082/api/state || echo "Web UI may still be starting"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/api/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Agent image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/agents/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agents:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Web UI image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/web-ui/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web-ui:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate Docker compose override for production
      if: github.event_name != 'pull_request'
      run: |
        cat > docker-compose.prod.yml << EOF
        services:
          api:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}
          
          agent_service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agents:${{ github.sha }}
          
          web_ui:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web-ui:${{ github.sha }}
        EOF
    
    - name: Upload production compose file
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-prod
        path: docker-compose.prod.yml
    
    - name: Show running services
      if: always()
      run: |
        echo "=== Docker Compose Services ==="
        docker compose ps
        echo "=== Service Logs ==="
        docker compose logs --tail=50
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
